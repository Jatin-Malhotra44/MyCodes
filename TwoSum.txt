					##################	
					# MOST EFFICIENT #
##################################################################################
#include <bits/stdc++.h> 
using namespace std; 
int main(){
	vector<int> nums;
	nums={1,2,3,4,5};
	int target=3;
	int comp;
	map<int,int>mymap;
	for(int i=0;i<nums.size();i++)
	mymap[i]=i;
	
	for(int i=0;i<nums.size();i++){
		comp=target-nums[i];
		if(mymap[comp] &&mymap[comp]!=i){
			cout<<nums[i]<<mymap[comp];
		}
	}
	return 0;
}
###################################################################################3
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
    vector<int> arr(2);
    for(int i=0;i<nums.size();i++){
        for(int j=0;j<nums.size();j++){
            if(nums[i]+nums[j]==target){
                arr[0]=i;
                arr[1]=j;
            }
        }
    }
        return (arr);
    }
};
#####################################################################################
#include <bits/stdc++.h> 
using namespace std;
int hasArrayTwoCandidates(int A[], int arr_size, 
                           int sum) 
{ 
    int l, r; 
  
    /* Sort the elements */
    sort(A, A + arr_size); 
  
    /* Now look for the two candidates in  
       the sorted array*/
    l = 0; 
    r = arr_size - 1; 
    while (l < r) { 
        if (A[l] + A[r] == sum) 
           {cout<<A[l]<<" "<<A[r];
			return 1; }
        else if(A[l] + A[r] < sum) 
            l++; 
        else // A[i] + A[j] > sum 
            r--; 
    } 
    return 0; 
} 
int main(){
int A[] = { 1, 4, 45, 6, 10, -8 }; 
    int n = 5; 
    int arr_size = sizeof(A) / sizeof(A[0]); 
  	hasArrayTwoCandidates(A, arr_size, n);



	return 0;
}
###################################################################################################################